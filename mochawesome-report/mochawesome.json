{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 7,
    "pending": 0,
    "failures": 1,
    "start": "2025-04-23T00:33:08.397Z",
    "end": "2025-04-23T00:33:09.283Z",
    "duration": 886,
    "testsRegistered": 8,
    "passPercent": 87.5,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b23cc2bb-7dae-42f5-a8fe-534776afdd85",
      "title": "",
      "fullFile": "cypress\\e2e\\produtos.cy.js",
      "file": "cypress\\e2e\\produtos.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "34149f75-f337-4c14-b929-5da838124b87",
          "title": "Teste da funcionalidade produto",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validar contrato de produtos",
              "fullTitle": "Teste da funcionalidade produto Validar contrato de produtos",
              "timedOut": null,
              "duration": 351,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request('/produtos').then(response => {\n  return _produtos.default.validateAsync(response.body);\n}).then(response => {\n  expect(response.code).to.equal(200);\n});",
              "err": {
                "message": "AssertionError: expected undefined to equal 200",
                "estack": "AssertionError: expected undefined to equal 200\n    at Context.eval (webpack://teste-api-cypress/./cypress/e2e/produtos.cy.js:16:37)\n    at getRet (http://localhost:3000/__cypress/runner/cypress_runner.js:119371:20)\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:3000/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (http://localhost:3000/__cypress/runner/cypress_runner.js:119382:66)\n    at Context.then (http://localhost:3000/__cypress/runner/cypress_runner.js:119633:21)",
                "diff": null
              },
              "uuid": "ca12c2ca-542c-4c11-915c-540a4bdb7f72",
              "parentUUID": "34149f75-f337-4c14-b929-5da838124b87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Listar produtos",
              "fullTitle": "Teste da funcionalidade produto Listar produtos",
              "timedOut": null,
              "duration": 43,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: '/produtos'\n}).then(response => {\n  //expect(response.body.produtos[0].nome).to.equal(produto)\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('produtos');\n  expect(response.duration).to.lessThan(20);\n});",
              "err": {},
              "uuid": "e3abb371-fc55-4e90-8653-3b23da0ba29e",
              "parentUUID": "34149f75-f337-4c14-b929-5da838124b87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cadastrar produtos",
              "fullTitle": "Teste da funcionalidade produto Cadastrar produtos",
              "timedOut": null,
              "duration": 40,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let nomeProduto = `Produto Novo ${Math.floor(Math.random() * 10000)}`;\ncy.cadastrarProduto(token, nomeProduto, 220, \"produto\", 20).then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n  idProduto = response.body._id;\n});",
              "err": {},
              "uuid": "e7666255-9a98-4ab7-bf0d-30f83a3ea2d2",
              "parentUUID": "34149f75-f337-4c14-b929-5da838124b87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cadastrar produto existente",
              "fullTitle": "Teste da funcionalidade produto Cadastrar produto existente",
              "timedOut": null,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarProduto(token, \"Logitech MX Vertical\", 470, \"Mouse\", 381).then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal('Já existe produto com esse nome');\n});",
              "err": {},
              "uuid": "02103859-749d-4636-bf96-cb2ba71b8de9",
              "parentUUID": "34149f75-f337-4c14-b929-5da838124b87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Editar produto",
              "fullTitle": "Teste da funcionalidade produto Editar produto",
              "timedOut": null,
              "duration": 55,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'PUT',\n  url: '/produtos/' + idProduto,\n  headers: {\n    authorization: token\n  },\n  body: {\n    \"nome\": \"Logitech MXO Vertical\",\n    \"preco\": 470,\n    \"descricao\": \"Mouse\",\n    \"quantidade\": 381\n  }\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body.message).to.equal(\"Registro alterado com sucesso\");\n});",
              "err": {},
              "uuid": "b2f68781-1273-42d5-9a61-329a09ffb5bc",
              "parentUUID": "34149f75-f337-4c14-b929-5da838124b87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Buscar por produto",
              "fullTitle": "Teste da funcionalidade produto Buscar por produto",
              "timedOut": null,
              "duration": 54,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: '/produtos/' + idProduto\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body.nome).to.equal('Logitech MXO Vertical');\n});",
              "err": {},
              "uuid": "914056a9-f241-4399-88a5-912056fff270",
              "parentUUID": "34149f75-f337-4c14-b929-5da838124b87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Excluir Produto",
              "fullTitle": "Teste da funcionalidade produto Excluir Produto",
              "timedOut": null,
              "duration": 51,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'DELETE',\n  url: '/produtos/' + idProduto,\n  headers: {\n    authorization: token\n  }\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body.message).to.equal(\"Registro excluído com sucesso\");\n});",
              "err": {},
              "uuid": "26dede70-5a22-49d3-93d9-1f20aff06dd2",
              "parentUUID": "34149f75-f337-4c14-b929-5da838124b87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deletar produto previamente cadastrado",
              "fullTitle": "Teste da funcionalidade produto Deletar produto previamente cadastrado",
              "timedOut": null,
              "duration": 60,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let nomeProduto = `Produto Novo ${Math.floor(Math.random() * 10000)}`;\ncy.cadastrarProduto(token, nomeProduto, 220, \"produto\", 20).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'DELETE',\n    url: `/produtos/${id}`,\n    headers: {\n      authorization: token\n    }\n  }).then(response => {\n    expect(response.status).to.equal(200);\n    expect(response.body.message).to.equal(\"Registro excluído com sucesso\");\n  });\n});",
              "err": {},
              "uuid": "582f4fba-d9ae-4cc7-ad8f-196e9d1c7398",
              "parentUUID": "34149f75-f337-4c14-b929-5da838124b87",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e3abb371-fc55-4e90-8653-3b23da0ba29e",
            "e7666255-9a98-4ab7-bf0d-30f83a3ea2d2",
            "02103859-749d-4636-bf96-cb2ba71b8de9",
            "b2f68781-1273-42d5-9a61-329a09ffb5bc",
            "914056a9-f241-4399-88a5-912056fff270",
            "26dede70-5a22-49d3-93d9-1f20aff06dd2",
            "582f4fba-d9ae-4cc7-ad8f-196e9d1c7398"
          ],
          "failures": [
            "ca12c2ca-542c-4c11-915c-540a4bdb7f72"
          ],
          "pending": [],
          "skipped": [],
          "duration": 690,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "configFile": "reporter-config.json"
      },
      "version": "6.2.0"
    }
  }
}